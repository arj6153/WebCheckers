<h1 id="project-design-documentation">PROJECT Design Documentation</h1>
<blockquote>
<p><em>The following template provides the headings for your Design Documentation. As you edit each section make sure you remove these commentary ‘blockquotes’; the lines that start with a &gt; character and appear in the generated PDF in italics.</em></p>
</blockquote>
<h2 id="team-information">Team Information</h2>
<ul>
<li>Team name: TEAMNAME</li>
<li>Team members
<ul>
<li>Bin Qiu</li>
<li>Truong Anh Tuan Hoang</li>
<li>Alex Johannesson</li>
<li>Michael Merlino</li>
</ul></li>
</ul>
<h2 id="executive-summary">Executive Summary</h2>
<p>Webcheckers application allows players to play checkers via the Java Spark framework. A player must sign in to the application to play with another player. Once a game is started, the application supports a drag and drop game experience for making moves.</p>
<h3 id="purpose">Purpose</h3>
<p>Users are allowed to play American checkers with other users that are signed in.</p>
<h3 id="glossary-and-acronyms">Glossary and Acronyms</h3>
<table>
<thead>
<tr class="header">
<th>Term</th>
<th>Definition</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VO</td>
<td>Value Object</td>
</tr>
</tbody>
</table>
<h2 id="requirements">Requirements</h2>
<p>Players must be able to sign in to the application in order to start a game of checkers against other signed in players. Using drag and drop interface, players are able to move their pieces to capture opponent pieces to win. If a player’s piece reaches the opponent’s end of the board, that piece will become a king piece. The king piece is able to move to either side of the board. Players also have the option to resign when they do not want to continue the game.</p>
<h3 id="definition-of-mvp">Definition of MVP</h3>
<p>Users are able to sign in, start a game by challenging an opponent, and play the game using American Checker rules.</p>
<h3 id="mvp-features">MVP Features</h3>
<ul>
<li>Sign In and Out
<ul>
<li>As a Player, I want to sign in so that I can play a game of checkers.</li>
<li>As a Player, I want to sign out so that I can leave the Webcheckers application.</li>
</ul></li>
<li>Start Game
<ul>
<li>As a Player, I want to start a game so that I can play checkers with opponent.</li>
</ul></li>
<li>Simple Move
<ul>
<li>As a Player, I want to perform a simple move so that I can advance my pieces in a game of checkers.</li>
</ul></li>
<li>Single Jump Move
<ul>
<li>As a Player, I want to make a single jump move so that I can capture my opponent’s piece.</li>
</ul></li>
<li>Multiple Jump Move
<ul>
<li>As a Player, I want to make a multiple jump move so that I can capture several of my opponent’s pieces in one turn.</li>
</ul></li>
<li>Kings
<ul>
<li>As a Player, I want to get king pieces so tha tI have better pieces to use against my opponent.</li>
</ul></li>
<li>Resign
<ul>
<li>As a Player, I want to resign from a game so that I can stop playing checkers.</li>
</ul></li>
<li>Undo
<ul>
<li>As a Player, I want to undo my previous move so that I can make a different move.</li>
</ul></li>
</ul>
<h3 id="roadmap-of-enhancements">Roadmap of Enhancements</h3>
<blockquote>
<p><em>Provide a list of top-level features in the order you plan to consider them.</em></p>
</blockquote>
<h2 id="application-domain">Application Domain</h2>
<p>This section describes the application domain.</p>
<p><img src="domain-model.png" alt="img.png" /><br />
The Application hosts the Checkers Game which users may log into to play or watch others play as a Spectator. They are also given the option to watch Replays of their previously played games. Every game is played by 2 Players who take turns controlling 12 pieces each on a 8x8 Board. Pieces start as normal pieces and may become King pieces during the process of the game.</p>
<h2 id="architecture-and-design">Architecture and Design</h2>
<p>This section describes the application architecture.</p>
<h3 id="summary">Summary</h3>
<p>The following Tiers/Layers model shows a high-level view of the webapp’s architecture.</p>
<figure>
<img src="architecture-tiers-and-layers.png" alt="The Tiers &amp; Layers of the Architecture" /><figcaption aria-hidden="true">The Tiers &amp; Layers of the Architecture</figcaption>
</figure>
<p>As a web application, the user interacts with the system using a browser. The client-side of the UI is composed of HTML pages with some minimal CSS for styling the page. There is also some JavaScript that has been provided to the team by the architect.</p>
<p>The server-side tiers include the UI Tier that is composed of UI Controllers and Views. Controllers are built using the Spark framework and View are built using the FreeMarker framework. The Application and Model tiers are built using plain-old Java objects (POJOs).</p>
<p>Details of the components within these tiers are supplied below.</p>
<h3 id="overview-of-user-interface">Overview of User Interface</h3>
<p>This section describes the web interface flow; this is how the user views and interacts with the WebCheckers application.</p>
<p><img src="statechart.png" alt="img_1.png" /><br />
The interface is made up of 3 main pages: Home, Game, Login. The user will get to the Home page and Login. Logging in will render the new Home page where players are able to challenge other logged in players. Playing a game will render the Game page and after the game is complete, the players return to the Home page with the lobby.</p>
<h3 id="ui-tier">UI Tier</h3>
<p>The server-side UI tier is responsible for mapping the HTTP and Routes to the Controller that is responsible for handling the interaction. This is accomplished by WebServer.</p>
<p>###Controllers for ViewModel and Redirecting | Controller | FreeMarker | Function | | — | — | — | | GetSignInRoute | signin.ftl | Displays sign-in page | | GetHomeRoute | home.ftl | Displays home page and player lobby | | GetGameRoute | game.ftl | Displays game page and sets up the game | | PostSignInRoute | redirects page | Redirects to home page when sign-in is a success | | PostSignOutRoute | redirects page | Redirects to sign out page |</p>
<p>###Controllers for AJAX and JSON POJO | Controller | Request | Response | | — | — | — | | PostBackupMoveRoute | NA | Backup message | | PostCheckTurnRoute | NA | Check turn message | | PostSubmitTurnRoute | NA | Submit turn message | | PostResignRoute | NA | Resign message | | PostValidateMove | Move | Valid move message |</p>
<blockquote>
<p><em>At appropriate places as part of this narrative provide one or more static models (UML class structure or object diagrams) with some details such as critical attributes and methods.</em></p>
</blockquote>
<blockquote>
<p><em>You must also provide any dynamic models, such as statechart and sequence diagrams, as is relevant to a particular aspect of the design that you are describing. For example, in WebCheckers you might create a sequence diagram of the <code>POST /validateMove</code> HTTP request processing or you might show a statechart diagram if the Game component uses a state machine to manage the game.</em></p>
</blockquote>
<blockquote>
<p><em>If a dynamic model, such as a statechart describes a feature that is not mostly in this tier and cuts across multiple tiers, you can consider placing the narrative description of that feature in a separate section for describing significant features. Place this after you describe the design of the three tiers.</em></p>
</blockquote>
<h3 id="application-tier">Application Tier</h3>
<p>The application tier is made up of components that handle the server-wide interactions between the players and the application using GRASP.</p>
<h3 id="model-tier">Model Tier</h3>
<p>The model tier shows the board of the checker game depending on the player. It encompasses the two players, checker pieces, and spaces which with interact together to make a move.</p>
<h3 id="design-improvements">Design Improvements</h3>
<blockquote>
<p><em>Discuss design improvements that you would make if the project were to continue. These improvement should be based on your direct analysis of where there are problems in the code base which could be addressed with design changes, and describe those suggested design improvements. After completion of the Code metrics exercise, you will also discuss the resutling metric measurements. Indicate the hot spots the metrics identified in your code base, and your suggested design improvements to address those hot spots.</em></p>
</blockquote>
<h2 id="testing">Testing</h2>
<blockquote>
<p><em>This section will provide information about the testing performed and the results of the testing.</em></p>
</blockquote>
<h3 id="acceptance-testing">Acceptance Testing</h3>
<blockquote>
<p><em>Report on the number of user stories that have passed all their acceptance criteria tests, the number that have some acceptance criteria tests failing, and the number of user stories that have not had any testing yet. Highlight the issues found during acceptance testing and if there are any concerns.</em></p>
</blockquote>
<h3 id="unit-testing-and-code-coverage">Unit Testing and Code Coverage</h3>
<blockquote>
<p><em>Discuss your unit testing strategy. Report on the code coverage achieved from unit testing of the code base. Discuss the team’s coverage targets, why you selected those values, and how well your code coverage met your targets. If there are any anomalies, discuss those.</em></p>
</blockquote>
